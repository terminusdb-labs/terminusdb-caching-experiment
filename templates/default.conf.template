server {
    listen            80;
    listen       [::]:80;

    resolver local=on ipv6=off;

    location / {
        proxy_pass http://terminusdb:6363;
    }

    location ~ /api/woql/(.*)/(.*) {
       set $org $1;
       set $data_product $2;

        access_by_lua_block {
           res = ngx.location.capture('/terminusdb_woql_to_document', { method = ngx.HTTP_HEAD, share_all_vars = true })
           if res.status == ngx.HTTP_OK then
              ngx.var.data_version = res.header["Terminusdb-Data-Version"]
              return
           end
           ngx.exit(res.status)
        }

       content_by_lua_block {
          if ngx.var.request_method ~= 'POST' then
             ngx.exec("/terminusdb")
             return
          end
          ngx.req.read_body()
          local data = ngx.req.get_body_data()
          if string.find(data, "Using")
            or string.find(data, "AddTriple")
            or string.find(data, "DeleteTriple")
            or string.find(data, "UpdateDocument")
            or string.find(data, "InsertDocument")
            or string.find(data, "DeleteDocument")
            or string.find(data, "AddData")
            or string.find(data, "DeleteLink") then
                ngx.exec("/terminusdb")
                return
          end
          local redis = require "resty.redis"
          local red = redis:new()
          red:set_timeouts(100, 100, 100)
          local resty_md5 = require "resty.md5"
          local md5 = resty_md5:new()
          md5:update(data)
          local digest = md5:final()
          local str = require "resty.string"
          local hashed_body = str.to_hex(digest)
          local key = ngx.var.data_version .. ngx.var.request_method .. ngx.var.uri .. (ngx.var.args or "") .. hashed_body
          ngx.header['X-Cache-Key'] = key
          local ok, err = red:connect("redis", 6379)
          if not ok then
            ngx.say("failed to connect: ", err)
            return
          end
          local redis_res, err = red:get(key)
          if not redis_res or redis_res == ngx.null then
             ngx.header['X-Cache-Status'] = 'MISS'
             res = ngx.location.capture('/terminusdb', {method = ngx.HTTP_POST })
             if res.status == ngx.HTTP_OK then
                red:setex(key, 43200, res.body)
             end
             ngx.say(res.body)
             return
          end
          ngx.header['X-Cache-Status'] = 'HIT'
          ngx.say(redis_res)
       }
    }

    location /api/document {
        set $data_version '';

        access_by_lua_block {
           res = ngx.location.capture('/terminusdb', { method = ngx.HTTP_HEAD })
           if res.status == ngx.HTTP_OK then
              ngx.var.data_version = res.header["Terminusdb-Data-Version"]
              return
           end
           ngx.exit(res.status)
        }

       content_by_lua_block {
          if ngx.var.request_method ~= 'GET' then
             ngx.exec("/terminusdb")
             return
          end
          local redis = require "resty.redis"
          local red = redis:new()
          red:set_timeouts(100, 100, 100)
          local key = ngx.var.data_version .. ngx.var.request_method .. ngx.var.uri .. (ngx.var.args or "")
          ngx.header['X-Cache-Key'] = key
          local ok, err = red:connect("redis", 6379)
          if not ok then
            ngx.say("failed to connect: ", err)
            return
          end
          local redis_res, err = red:get(key)
          if not redis_res or redis_res == ngx.null then
             ngx.header['X-Cache-Status'] = 'MISS'
             res = ngx.location.capture('/terminusdb')
             if res.status == ngx.HTTP_OK then
                red:setex(key, 43200, res.body)
             end
             ngx.say(res.body)
             return
          end
          ngx.header['X-Cache-Status'] = 'HIT'
          ngx.say(redis_res)
       }
    }

    location /terminusdb {
        internal;
        proxy_pass http://terminusdb:6363$request_uri;
    }

    location /terminusdb_woql_to_document {
        internal;
        proxy_pass http://terminusdb:6363/api/document/$org/$data_product;
    }

    location /error/401 {
        return 401;
    }
}

